# ANZX AI Platform - Local Development Environment
# Complete stack with PostgreSQL, Redis, and all services

version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: anzx-postgres
    environment:
      POSTGRES_DB: anzx_ai_platform
      POSTGRES_USER: anzx_user
      POSTGRES_PASSWORD: local_dev_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anzx_user -d anzx_ai_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anzx-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: anzx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - anzx-network

  # Core API Service
  core-api:
    build:
      context: ./services/core-api
      dockerfile: Dockerfile.dev
    container_name: anzx-core-api
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://anzx_user:local_dev_password@postgres:5432/anzx_ai_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=local_dev_jwt_secret_key_12345
      - STRIPE_SECRET_KEY=sk_test_local_development_key
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
      - PROJECT_ID=extreme-gecko-466211-t1
      - REGION=australia-southeast1
    ports:
      - "8000:8000"
    volumes:
      - ./services/core-api:/app
      - ./credentials:/app/credentials
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - anzx-network
    restart: unless-stopped

  # Knowledge Service
  knowledge-service:
    build:
      context: ./services/knowledge-service
      dockerfile: Dockerfile.dev
    container_name: anzx-knowledge-service
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://anzx_user:local_dev_password@postgres:5432/anzx_ai_platform
      - CORE_API_URL=http://core-api:8000
      - PROJECT_ID=extreme-gecko-466211-t1
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
    ports:
      - "8001:8001"
    volumes:
      - ./services/knowledge-service:/app
      - ./credentials:/app/credentials
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      core-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - anzx-network
    restart: unless-stopped

  # Chat Widget Development Server
  chat-widget:
    build:
      context: ./services/chat-widget
      dockerfile: Dockerfile.dev
    container_name: anzx-chat-widget
    environment:
      - NODE_ENV=development
      - API_URL=http://localhost:8000
      - WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./services/chat-widget:/app
      - /app/node_modules
    networks:
      - anzx-network
    restart: unless-stopped

  # Nginx reverse proxy for local development
  nginx:
    image: nginx:alpine
    container_name: anzx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./website:/usr/share/nginx/html
    depends_on:
      - core-api
      - knowledge-service
      - chat-widget
    networks:
      - anzx-network
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: anzx-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - anzx-network

  # Adminer for database management
  adminer:
    image: adminer
    container_name: anzx-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - anzx-network

volumes:
  postgres_data:
  redis_data:

networks:
  anzx-network:
    driver: bridge