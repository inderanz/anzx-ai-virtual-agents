"""
Email Template Service
Handles email template rendering and management
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime
from jinja2 import Template, Environment, BaseLoader

logger = logging.getLogger(__name__)


class EmailTemplateService:
    """
    Service for managing and rendering email templates
    """
    
    def __init__(self):
        self.env = Environment(loader=BaseLoader())
        self.templates = {
            "auto_reply": {
                "subject": "Re: {{ original_subject }}",
                "body": """
Thank you for contacting {{ organization_name }}.

We have received your message and {% if ai_response %}our AI assistant has provided a response below{% else %}will respond shortly{% endif %}.

{% if ai_response %}
{{ ai_response }}
{% endif %}

{% if escalation_email and not ai_response %}
If this is urgent, please contact us directly at {{ escalation_email }}.
{% endif %}

{% if signature %}
{{ signature }}
{% else %}
Best regards,
{{ organization_name }} Support Team
{% endif %}

---
{% if ai_response %}
This response was generated by ANZx.ai Assistant. If you need further assistance, please reply to this email.
{% else %}
This is an automated acknowledgment from ANZx.ai.
{% endif %}
                """.strip()
            },
            
            "escalation_notification": {
                "subject": "ESCALATION: {{ thread_subject }}",
                "body": """
Email thread has been escalated and requires human attention.

Thread Details:
- Subject: {{ thread_subject }}
- Customer: {{ customer_name }} ({{ customer_email }})
- Created: {{ created_at }}
- Messages: {{ message_count }}
- Last Activity: {{ last_message_at }}
- Escalation Reason: {{ escalation_reason }}

Recent Messages:
{% for message in recent_messages %}
---
From: {{ message.sender }}
Date: {{ message.date }}
Content: {{ message.content[:200] }}{% if message.content|length > 200 %}...{% endif %}

{% endfor %}

Please review and respond to this email thread in the ANZx.ai dashboard.

Thread ID: {{ thread_id }}
Dashboard Link: {{ dashboard_link }}

---
ANZx.ai System Notification
                """.strip()
            },
            
            "business_hours_reply": {
                "subject": "Re: {{ original_subject }} - Outside Business Hours",
                "body": """
Thank you for contacting {{ organization_name }}.

We have received your message outside of our business hours. Our team will respond during our next business day.

Our business hours are:
{% for day, hours in business_hours.items() %}
{% if hours.enabled %}
{{ day.title() }}: {{ hours.start }} - {{ hours.end }}
{% endif %}
{% endfor %}

{% if escalation_email %}
If this is urgent, please contact us directly at {{ escalation_email }}.
{% endif %}

{% if signature %}
{{ signature }}
{% else %}
Best regards,
{{ organization_name }} Support Team
{% endif %}

---
This is an automated response from ANZx.ai.
                """.strip()
            },
            
            "ai_response": {
                "subject": "Re: {{ original_subject }}",
                "body": """
{{ ai_response }}

{% if citations %}

Sources:
{% for citation in citations %}
- {{ citation.source }}{% if citation.url %}: {{ citation.url }}{% endif %}
{% endfor %}
{% endif %}

{% if signature %}

{{ signature }}
{% else %}

Best regards,
{{ organization_name }} Support Team
{% endif %}

---
This response was generated by ANZx.ai Assistant. If you need further assistance, please reply to this email.
                """.strip()
            },
            
            "human_handoff": {
                "subject": "Re: {{ original_subject }}",
                "body": """
Thank you for your message. I'm transferring your inquiry to one of our human support specialists who will be better able to assist you.

You can expect a response within {{ response_time_hours }} hours during our business hours.

{% if escalation_email %}
For urgent matters, you can also contact us directly at {{ escalation_email }}.
{% endif %}

{% if signature %}
{{ signature }}
{% else %}
Best regards,
{{ organization_name }} Support Team
{% endif %}

---
This message was sent by ANZx.ai Assistant.
                """.strip()
            },
            
            "follow_up": {
                "subject": "Following up: {{ original_subject }}",
                "body": """
Hi {{ customer_name }},

I wanted to follow up on your recent inquiry to see if you need any additional assistance.

{% if days_since_last_message > 7 %}
It's been {{ days_since_last_message }} days since our last exchange, and I wanted to make sure your issue was resolved.
{% endif %}

If you have any other questions or need further help, please don't hesitate to reply to this email.

{% if signature %}
{{ signature }}
{% else %}
Best regards,
{{ organization_name }} Support Team
{% endif %}

---
This is a follow-up message from ANZx.ai.
                """.strip()
            },
            
            "satisfaction_survey": {
                "subject": "How was your support experience? - {{ original_subject }}",
                "body": """
Hi {{ customer_name }},

Thank you for contacting {{ organization_name }} support. We hope we were able to resolve your inquiry satisfactorily.

We'd love to hear about your experience. Please take a moment to rate our support:

{{ survey_link }}

Your feedback helps us improve our service and better assist future customers.

{% if signature %}
{{ signature }}
{% else %}
Best regards,
{{ organization_name }} Support Team
{% endif %}

---
This survey request was sent by ANZx.ai.
                """.strip()
            }
        }
    
    def render_template(
        self,
        template_name: str,
        context: Dict[str, Any],
        custom_template: Optional[str] = None
    ) -> Dict[str, str]:
        """
        Render an email template with the given context
        
        Args:
            template_name: Name of the template to render
            context: Template context variables
            custom_template: Custom template content (overrides default)
            
        Returns:
            Dictionary with 'subject' and 'body' keys
        """
        try:
            if custom_template:
                # Use custom template
                template_config = {
                    "subject": context.get("subject", "{{ original_subject }}"),
                    "body": custom_template
                }
            else:
                # Use built-in template
                if template_name not in self.templates:
                    raise ValueError(f"Template '{template_name}' not found")
                
                template_config = self.templates[template_name]
            
            # Render subject
            subject_template = self.env.from_string(template_config["subject"])
            subject = subject_template.render(**context)
            
            # Render body
            body_template = self.env.from_string(template_config["body"])
            body = body_template.render(**context)
            
            return {
                "subject": subject.strip(),
                "body": body.strip()
            }
            
        except Exception as e:
            logger.error(f"Template rendering failed: {e}")
            # Return fallback template
            return {
                "subject": context.get("original_subject", "Support Response"),
                "body": context.get("fallback_message", "Thank you for your message. We will respond shortly.")
            }
    
    def get_template_names(self) -> list:
        """Get list of available template names"""
        return list(self.templates.keys())
    
    def validate_template(self, template_content: str, sample_context: Dict[str, Any]) -> Dict[str, Any]:
        """
        Validate a template by attempting to render it with sample context
        
        Args:
            template_content: Template content to validate
            sample_context: Sample context for testing
            
        Returns:
            Validation result with success status and any errors
        """
        try:
            template = self.env.from_string(template_content)
            rendered = template.render(**sample_context)
            
            return {
                "valid": True,
                "rendered_preview": rendered[:200] + "..." if len(rendered) > 200 else rendered
            }
            
        except Exception as e:
            return {
                "valid": False,
                "error": str(e)
            }
    
    def create_context(
        self,
        organization_name: str,
        customer_name: str = "",
        customer_email: str = "",
        original_subject: str = "",
        ai_response: str = "",
        thread_id: str = "",
        escalation_email: str = "",
        signature: str = "",
        **kwargs
    ) -> Dict[str, Any]:
        """
        Create a standard context dictionary for template rendering
        
        Args:
            organization_name: Name of the organization
            customer_name: Customer's name
            customer_email: Customer's email
            original_subject: Original email subject
            ai_response: AI-generated response content
            thread_id: Email thread ID
            escalation_email: Escalation email address
            signature: Email signature
            **kwargs: Additional context variables
            
        Returns:
            Context dictionary for template rendering
        """
        context = {
            "organization_name": organization_name,
            "customer_name": customer_name or customer_email.split("@")[0] if customer_email else "Customer",
            "customer_email": customer_email,
            "original_subject": original_subject,
            "ai_response": ai_response,
            "thread_id": thread_id,
            "escalation_email": escalation_email,
            "signature": signature,
            "current_date": datetime.utcnow().strftime("%Y-%m-%d"),
            "current_time": datetime.utcnow().strftime("%H:%M:%S UTC"),
            "current_year": datetime.utcnow().year
        }
        
        # Add any additional context variables
        context.update(kwargs)
        
        return context
    
    def get_business_hours_context(self, business_hours: Dict[str, Any]) -> Dict[str, Any]:
        """
        Format business hours for template context
        
        Args:
            business_hours: Business hours configuration
            
        Returns:
            Formatted business hours context
        """
        if not business_hours or not business_hours.get("enabled"):
            return {"business_hours": {}}
        
        formatted_hours = {}
        days = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
        
        for day in days:
            day_config = business_hours.get(day, {})
            if day_config.get("enabled", False):
                formatted_hours[day] = {
                    "enabled": True,
                    "start": day_config.get("start", "09:00"),
                    "end": day_config.get("end", "17:00")
                }
            else:
                formatted_hours[day] = {"enabled": False}
        
        return {"business_hours": formatted_hours}


# Global template service instance
email_template_service = EmailTemplateService()