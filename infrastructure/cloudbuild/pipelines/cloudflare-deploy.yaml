# Cloudflare Worker Deployment Pipeline
# Deploys only the Cloudflare Worker for custom domain without rebuilding services

steps:
  # Get cricket-agent URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'get-agent-url'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        AGENT_URL=$$(gcloud run services describe cricket-agent --region ${_REGION} --format='value(status.url)')
        echo -n "$$AGENT_URL" > AGENT_URL.txt
        echo "Agent URL captured: $$AGENT_URL"
    waitFor: ['-']

  # Render wrangler.toml from secrets
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'render-wrangler-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        # Read secrets
        CF_ACCOUNT_ID=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_ACCOUNT_ID)
        CF_ZONE_ID=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_ZONE_ID)
        CF_WORKER_NAME=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_WORKER_NAME)
        CF_ROUTE_PATTERN=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_ROUTE_PATTERN)
        AGENT_URL=$$(cat AGENT_URL.txt)
        
        # Render wrangler.toml
        sed -e "s|\$${CLOUDFLARE_ACCOUNT_ID}|$$CF_ACCOUNT_ID|g" \
            -e "s|\$${CLOUDFLARE_ZONE_ID}|$$CF_ZONE_ID|g" \
            -e "s|\$${CLOUDFLARE_WORKER_NAME}|$$CF_WORKER_NAME|g" \
            -e "s|\$${CLOUDFLARE_ROUTE_PATTERN}|$$CF_ROUTE_PATTERN|g" \
            -e "s|\$${CRICKET_AGENT_URL}|$$AGENT_URL|g" \
            infrastructure/cloudflare/wrangler.toml.tmpl > infrastructure/cloudflare/wrangler.toml
        
        echo "wrangler.toml rendered (values masked)"
    waitFor: ['get-agent-url']

  # Deploy Cloudflare Worker
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'wrangler-deploy'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        # Install Node.js and npm
        curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
        apt-get install -y nodejs
        
        # Get API token
        CF_API_TOKEN=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_API_TOKEN)
        export CF_API_TOKEN
        
        # Install wrangler
        npm i -g wrangler@latest >/dev/null
        WRANGLER_VERSION=$$(wrangler --version)
        echo "Wrangler $$WRANGLER_VERSION"
        
        # Deploy worker
        cd infrastructure/cloudflare
        wrangler deploy --config wrangler.toml --name $$(gcloud secrets versions access latest --secret=CLOUDFLARE_WORKER_NAME)
        
        # Clean up environment
        unset CF_API_TOKEN
        echo -n "$$WRANGLER_VERSION" > WRANGLER_VERSION.txt
        echo "Cloudflare Worker deployed successfully"
    waitFor: ['render-wrangler-config']

  # Write Cloudflare deployment state
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: 'write-cloudflare-state'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        # Get Cloudflare configuration
        CF_ACCOUNT_ID=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_ACCOUNT_ID)
        CF_ZONE_ID=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_ZONE_ID)
        CF_WORKER_NAME=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_WORKER_NAME)
        CF_ROUTE_PATTERN=$$(gcloud secrets versions access latest --secret=CLOUDFLARE_ROUTE_PATTERN)
        WRANGLER_VERSION=$$(cat WRANGLER_VERSION.txt 2>/dev/null || echo "unknown")
        AGENT_URL=$$(cat AGENT_URL.txt)
        
        # Create Cloudflare deployment state
        cat > /tmp/cloudflare-deployment-state.json << JSONEOF
        {
          "cloudflare_deployment": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "build_id": "${BUILD_ID}",
            "project_id": "${_PROJECT_ID}",
            "region": "${_REGION}",
            "worker_name": "$$CF_WORKER_NAME",
            "route_pattern": "$$CF_ROUTE_PATTERN",
            "zone_id": "$$CF_ZONE_ID",
            "account_id": "$$CF_ACCOUNT_ID",
            "wrangler_version": "$$WRANGLER_VERSION",
            "custom_domain": "https://anzx.ai/api/cricket",
            "target_service": "$$AGENT_URL",
            "status": "deployed"
          }
        }
        JSONEOF
        
        # Upload to GCS
        gsutil cp /tmp/cloudflare-deployment-state.json gs://anzx-deploy-state/state/cloudflare-${BUILD_ID}.json
        
        echo '{"action": "write_cloudflare_state", "status": "success", "file": "cloudflare-'${BUILD_ID}'.json"}'
    waitFor: ['wrangler-deploy']

# Global substitutions with defaults
substitutions:
  _PROJECT_ID: 'virtual-stratum-473511-u5'
  _REGION: 'australia-southeast1'

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: 'ALLOW_LOOSE'

timeout: '600s'  # 10 minutes
