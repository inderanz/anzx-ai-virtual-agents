steps:
  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:latest'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:v1.5'
      - './services/core-api'
    id: 'build-image'

  # Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api'
    id: 'push-image'
    waitFor: ['build-image']

  # Run database migrations
  - name: '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:${BUILD_ID}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        export DATABASE_URL="postgresql://anzx_user:$DB_PASSWORD@34.40.163.17:5432/anzx_platform"
        python -m alembic upgrade head
    secretEnv: ['DB_PASSWORD']
    id: 'run-migrations'
    waitFor: ['push-image']

  # Run tests
  - name: '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:${BUILD_ID}'
    entrypoint: 'python'
    args: ['-m', 'pytest', 'tests/', '-v', '--cov=.', '--cov-report=xml']
    env:
      - 'ENVIRONMENT=test'
    id: 'run-tests'
    waitFor: ['build-image']

  # Security scan
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'images'
      - 'scan'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:${BUILD_ID}'
      - '--format=json'
    id: 'security-scan'
    waitFor: ['push-image']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/core-api:${BUILD_ID}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--set-env-vars=ENVIRONMENT=${_ENVIRONMENT}'
      - '--max-instances=10'
      - '--memory=2Gi'
      - '--cpu=2'
      - '--timeout=300'
      - '--concurrency=100'
    id: 'deploy-service'
    waitFor: ['run-migrations', 'run-tests', 'security-scan']

  # Health check after deployment
  - name: 'gcr.io/cloud-builders/curl'
    args:
      - '-f'
      - '$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")/health'
    id: 'health-check'
    waitFor: ['deploy-service']

# Store build artifacts
artifacts:
  objects:
    location: 'gs://${_PROJECT_ID}-${_ENVIRONMENT}-build-artifacts'
    paths:
      - 'services/core-api/coverage.xml'

# Secret environment variables
availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/cloudsql-app-password-dev/versions/latest
      env: 'DB_PASSWORD'
    - versionName: projects/${_PROJECT_ID}/secrets/${_ENVIRONMENT}-anzx-db-connection-string/versions/latest
      env: 'DB_HOST'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'

# Timeout for the entire build
timeout: '1200s'

# Substitutions (provided by trigger)
substitutions:
  _ENVIRONMENT: 'dev'
  _REGION: 'australia-southeast1'
  _PROJECT_ID: 'extreme-gecko-466211-t1'
  _REPO_NAME: 'anzx-ai-platform-docker'
  _SERVICE_NAME: 'anzx-ai-platform-core-api'