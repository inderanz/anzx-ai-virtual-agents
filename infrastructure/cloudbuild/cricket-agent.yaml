steps:
  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/cricket-agent:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/cricket-agent:latest'
      - './services/cricket-agent'
    id: 'build-image'

  # Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/cricket-agent'
    id: 'push-image'
    waitFor: ['build-image']

  # Run tests
  - name: '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/cricket-agent:${BUILD_ID}'
    entrypoint: 'python'
    args: ['-m', 'pytest', 'tests/', '-v', '--cov=.', '--cov-report=xml']
    env:
      - 'ENVIRONMENT=test'
      - 'PLAYHQ_MODE=public'
      - 'GCP_PROJECT=${_PROJECT_ID}'
      - 'REGION=${_REGION}'
    id: 'run-tests'
    waitFor: ['build-image']

  # Security scan
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'images'
      - 'scan'
      - '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/cricket-agent:${BUILD_ID}'
      - '--format=json'
    id: 'security-scan'
    waitFor: ['push-image']

  # Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image=${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/cricket-agent:${BUILD_ID}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--no-allow-unauthenticated'
      - '--set-env-vars=ENVIRONMENT=${_ENVIRONMENT},PLAYHQ_MODE=${_PLAYHQ_MODE},GCP_PROJECT=${_PROJECT_ID},REGION=${_REGION}'
      - '--max-instances=20'
      - '--memory=4Gi'
      - '--cpu=2'
      - '--timeout=300'
      - '--concurrency=100'
      - '--service-account=${_SERVICE_ACCOUNT}'
      - '--set-cloudsql-instances=${_CLOUDSQL_INSTANCE}'
    id: 'deploy-service'
    waitFor: ['run-tests', 'security-scan']

  # Health check after deployment
  - name: 'gcr.io/cloud-builders/curl'
    args:
      - '-f'
      - '-H'
      - 'Authorization: Bearer $(gcloud auth print-access-token)'
      - '$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format="value(status.url)")/healthz'
    id: 'health-check'
    waitFor: ['deploy-service']

  # Setup Cloud Scheduler for nightly sync (if enabled)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENABLE_SCHEDULER}" = "true" ]; then
          gcloud scheduler jobs create http cricket-sync-job \
            --schedule="0 2 * * *" \
            --uri="$(gcloud run services describe ${_SERVICE_NAME} --region=${_REGION} --format='value(status.url)')/internal/refresh" \
            --http-method=POST \
            --headers="Authorization=Bearer $(gcloud auth print-access-token)" \
            --body='{"scope": "all"}' \
            --time-zone="Australia/Melbourne" \
            --location=${_REGION} || echo "Scheduler job may already exist"
        fi
    id: 'setup-scheduler'
    waitFor: ['deploy-service']

# Store build artifacts
artifacts:
  objects:
    location: 'gs://${_PROJECT_ID}-${_ENVIRONMENT}-build-artifacts'
    paths:
      - 'services/cricket-agent/coverage.xml'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitutionOption: 'ALLOW_LOOSE'

# Timeout for the entire build
timeout: '1200s'

# Substitutions (provided by trigger)
substitutions:
  _ENVIRONMENT: 'dev'
  _REGION: 'australia-southeast1'
  _PROJECT_ID: 'your-project-id'
  _REPO_NAME: 'anzx-repo'
  _SERVICE_NAME: 'dev-anzx-cricket-agent'
  _SERVICE_ACCOUNT: 'cricket-agent-sa@your-project-id.iam.gserviceaccount.com'
  _CLOUDSQL_INSTANCE: 'your-project-id:australia-southeast1:your-instance'
  _PLAYHQ_MODE: 'public'
  _ENABLE_SCHEDULER: 'true'
